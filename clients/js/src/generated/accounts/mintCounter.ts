/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi';

export type MintCounter = Account<MintCounterAccountData>;

export type MintCounterAccountData = { count: number };

export type MintCounterAccountDataArgs = MintCounterAccountData;

export function getMintCounterAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MintCounterAccountDataArgs, MintCounterAccountData> {
  const s = context.serializer;
  return s.struct<MintCounterAccountData>([['count', s.u16()]], {
    description: 'MintCounter',
  }) as Serializer<MintCounterAccountDataArgs, MintCounterAccountData>;
}

export function deserializeMintCounter(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): MintCounter {
  return deserializeAccount(
    rawAccount,
    getMintCounterAccountDataSerializer(context)
  );
}

export async function fetchMintCounter(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<MintCounter> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'MintCounter');
  return deserializeMintCounter(context, maybeAccount);
}

export async function safeFetchMintCounter(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<MintCounter | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeMintCounter(context, maybeAccount)
    : null;
}

export async function fetchAllMintCounter(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<MintCounter[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MintCounter');
    return deserializeMintCounter(context, maybeAccount);
  });
}

export async function safeFetchAllMintCounter(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<MintCounter[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMintCounter(context, maybeAccount as RpcAccount)
    );
}

export function getMintCounterGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.get('mplCandyGuard').publicKey;
  return gpaBuilder(context, programId)
    .registerFields<{ count: number }>([['count', s.u16()]])
    .deserializeUsing<MintCounter>((account) =>
      deserializeMintCounter(context, account)
    );
}

export function getMintCounterSize(
  context: Pick<Context, 'serializer'>
): number | null {
  return getMintCounterAccountDataSerializer(context).fixedSize;
}
